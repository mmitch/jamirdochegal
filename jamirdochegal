#!/usr/bin/env perl
#
# jamirdochegal  -  listen to web radios via mplayer
# Copyright (C) 2009-2016  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v2 (or later)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use File::Which;

use constant PLAYERS => (
    { BINARY => 'mplayer', PARAMS => [ '-cache', '256' ] },
    { BINARY => 'mpv', PARAMS => [ '--cache=256' ] }
    );

#### process a line from the stations list
my %station;
sub process_station_line($)
{
    my $line = shift;

    chomp $line;
    return if $line =~ /^\s*$/;
    return if $line =~ /^\s*#/;

    if ($line =~ /^\s*DELETE:(\S+)\s*$/) {
	return "can't delete unkown station `$1'" unless exists $station{$1};
	delete $station{$1};

    } elsif ($line =~ /^\s*RENAME:(\S+)\s(\S+)*$/) {
	return "can't rename unkown station `$1'" unless exists $station{$1};
	$station{$2} = $station{$1};
	$station{$2}->{'SHORTCUT'} = $2;
	delete $station{$1};

    } elsif ($line =~ /^(?:\s*(\S+)\|)?(.*)\s+(\S+)\s*$/) {
	my ($shortcut, $name, $url, $flags) = ($1, $2, $3, {});

	$shortcut = $name unless defined $shortcut;

	while ($url =~ s/^([A-Z]+)://g) {
	    $flags->{$1}++;
	}

	$station{$shortcut} = {
	    'SHORTCUT' => $shortcut,
	    'NAME'     => $name,
	    'URL'      => $url,
	    'FLAGS'    => $flags,
	};

    } else {
	return "broken line";
    }
    return "";
}

#### check if a given player exists
sub player_exists($)
{
    return defined which $_->{BINARY};
}

#### read global stations
while (my $line = <DATA>) {
    my $err = process_station_line($line);
    warn "global configuration [$.]: $err\n" if $err;
}


#### read local stations
my $rcfile = $ENV{HOME}.'/.jamirdochegalrc';
if ( -e $rcfile ) {
    open RCFILE, '<', $rcfile or warn "can't open `$rcfile': $!\n";
    while (my $line = <RCFILE>) {
	my $err = process_station_line($line);
	warn "local configuration [$.]: $err\n" if $err;
    }
    close RCFILE or warn "can't open `$rcfile': $!\n";
}


#### default action
if (@ARGV == 0) {
    push @ARGV, '-r';
}


#### handle actions
my $action = shift @ARGV;


#### print help?
if ($action eq '-h') {
    print << "EOF" ;

jamirdochegal  -  listen to web radios via mplayer
Copyright (C) 2009-2013  Christian Garbs <mitch\@cgarbs.de>
Licensed under GNU GPL v2 (or later)

usage:
  jamirdochegal [-h | -l | -r | <station> [<additional-mplayer-arguments>]]

  -h   print this help
  -l   list all stations
  -r   tune into a random station (default with no arguments given)

EOF
    ;
    exit 0;
}


#### print station list?
if ($action eq '-l') {
    foreach my $station (sort keys %station) {
	if ($station eq $station{$station}->{'NAME'}) {
	    print "$station\n";
	} else {
	    print "$station  ($station{$station}->{'NAME'})\n";
	}
    }
    exit 0;
}


#### random station?
if ($action eq '-r') {
    my @station = keys %station;
    $action = @station[ int rand (@station) ];
}


#### tune in
unless (exists $station{$action}) {
    my @matches = grep { substr($_, 0, length $action) eq $action } sort keys %station;
    if (@matches == 0) {
	# fallback: try full-text search on long station names
	@matches = grep { index($station{$_}->{'NAME'}, $action) >= 0 } sort keys %station;
    }
    if (@matches == 0) {
	die "unknown station `$action'\n";
    } elsif (@matches > 1) {
	warn "inexact station name `$action'\n";
	warn "possible completions:\n";
	foreach my $station (@matches) {
	    if ($station eq $station{$station}->{'NAME'}) {
		print "$station\n";
	    } else {
		print "$station  ($station{$station}->{'NAME'})\n";
	    }
	}
	exit 0;
    }
    $action = $matches[0];
}
print "\n>>>> $station{$action}->{NAME}\n\n";
my @parms;
push @parms, ('-demuxer', 'ogg') if exists $station{$action}->{FLAGS}->{OGGDEMUX};
push @parms, '-playlist' unless exists $station{$action}->{FLAGS}->{DIRECT};


#### find player to use
my @available_players = grep { player_exists($_) } PLAYERS;
die 'no suitable player found' unless @available_players;
my $player = $available_players[-1];


#### and play
exec $player->{BINARY}, @{$player->{PARAMS}}, @parms, $station{$action}->{URL}, @ARGV;


#### the station list
# - define stations:
#   [<shortcut>|]<name> [<flag>]<url>
#   where <url> is a playlist
#   <flag> is optional an can be one or more of:
#   DIRECT:    when <url> is no playlist but a direct stream
#   OGGDEMUX:  work around mplayer/lavf-demuxer problems with OGG streams
# - delete stations:
#   DELETE:<name>
#   DELETE:<shortcut>
# - rename stations:
#   RENAME:<name> <shortcut>
#   RENAME:<shortcut> <shortcut>
__DATA__
bassdrive http://bassdrive.com/v2/streams/BassDrive.pls
demovibes DIRECT:http://privat.is-by.us:8000/necta192.mp3
dfmw|detektorfm-wort http://detektor.fm/detektor_fm-wort.m3u
dfmm|detektorfm-musik http://detektor.fm/detektor_fm-musik.m3u
dlf|deutschlandfunk OGGDEMUX:http://www.dradio.de/streaming/dlf_hq_ogg.m3u
dradiowissen OGGDEMUX:http://www.dradio.de/streaming/dradiowissen_hq_ogg.m3u
klassikbrazil DIRECT:http://stream.klassikradio.de/brazil/mp3-128/www.klassikradio.de/
klassikdreams DIRECT:http://stream.klassikradio.de/dreams/mp3-128/www.klassikradio.de/
klassikgames DIRECT:http://stream.klassikradio.de/games/mp3-128/www.klassikradio.de/
klassikhealing DIRECT:http://stream.klassikradio.de/healing/mp3-128/www.klassikradio.de/
klassiklegenden DIRECT:http://stream.klassikradio.de/legenden/mp3-128/www.klassikradio.de/
klassiklive DIRECT:http://stream.klassikradio.de/live/mp3-128/www.klassikradio.de/
klassiklounge DIRECT:http://stream.klassikradio.de/lounge/mp3-128/www.klassikradio.de/
klassikloungebeat DIRECT:http://stream.klassikradio.de/loungebeat/mp3-128/www.klassikradio.de/
klassikmovie DIRECT:http://stream.klassikradio.de/movie/mp3-128/www.klassikradio.de/
klassiknature DIRECT:http://stream.klassikradio.de/nature/mp3-128/www.klassikradio.de/
klassikpiano DIRECT:http://stream.klassikradio.de/piano/mp3-128/www.klassikradio.de/
klassikrock DIRECT:http://stream.klassikradio.de/rock/mp3-128/www.klassikradio.de/
klassikschiller DIRECT:http://stream.klassikradio.de/schiller/mp3-128/www.klassikradio.de/
kohina OGGDEMUX:http://kohina.radio.ethz.ch:8000/kohina.ogg.m3u
ndr2 http://www.ndr.de/resources/metadaten/audio/m3u/ndr2.m3u
nsw-anime DIRECT:http://listen.nsw-anime.de/
nubreaks http://nubreaks.com/modules/mod_internetradio/makeplaylist.php?ip=69.175.103.232&port=8700&format=PLS
rainwave http://all.rainwave.cc/tune_in/5.ogg
ocremix http://ocr.rainwave.cc/tune_in/2.ogg
slay|slayradio DIRECT:http://relay1.slayradio.org:8000/
soma-70s https://somafm.com/seventies.pls
soma-beatblender https://somafm.com/startstream=beatblender.pls
soma-bootliquor https://somafm.com/startstream=bootliquor.pls
soma-brfm https://somafm.com/brfm.pls
soma-cliqhop https://somafm.com/startstream=cliqhop.pls
soma-covers https://somafm.com/startstream=covers.pls
soma-digitalis https://somafm.com/startstream=digitalis.pls
soma-doomed https://somafm.com/startstream=doomed.pls
drone|soma-dronezone https://somafm.com/startstream=dronezone.pls
soma-fluid https://somafm.com/fluid.pls
soma-groovesalad https://somafm.com/startstream=groovesalad.pls
soma-illstreet https://somafm.com/startstream=illstreet.pls
ip|soma-indiepop https://somafm.com/startstream=indiepop.pls
soma-lush https://somafm.com/startstream=lush.pls
soma-metal https://somafm.com/metal.pls
mc|soma-missioncontrol https://somafm.com/startstream=missioncontrol.pls
soma-poptron https://somafm.com/startstream=poptron.pls
sa|soma-secretagent https://somafm.com/startstream=secretagent.pls
sid|sid station http://185.80.220.12:2199/tunein/jotayl00.pls
soma-sf1033 https://somafm.com/sf1033.pls
soma-sonicuniverse https://somafm.com/startstream=sonicuniverse.pls
soma-spacestation https://somafm.com/startstream=spacestation.pls
soma-suburbsofgoa https://somafm.com/startstream=suburbsofgoa.pls
soma-tags https://somafm.com/startstream=tags.pls
soma-thistle https://somafm.com/thistle.pls
soma-u80s https://somafm.com/startstream=u80s.pls
soma-xmasinfrisco https://somafm.com/startstream=xmasinfrisco.pls
phish|live Phish radio http://www.livephish.com/radio/listen.m3u
sst|streaming soundtracks http://www.streamingsoundtracks.com/modules/Listen/MP3-hi.pls
ctfm|ClubTime.FM http://listen.clubtime.fm/dsl.pls
wdr2|WDR 2 http://www.wdr.de/wdrlive/media/mp3/wdr2-muensterland.m3u
htfm|HouseTime.FM http://listen.housetime.fm/dsl.pls
tbfm|TranceBase.FM http://listen.trancebase.fm/dsl.pls
Techno.FM Live Channel DIRECT:http://stream.techno.fm:8000/stream

# bitjam DIRECT:OGGDEMUX:http://88.80.10.21:8086/bitjam.ogg
# cryosleep http://207.200.96.225:8022/listen.pls
# hardrave.jp http://hardrave.jp:9000/listen.pls
# rivendell http://www.radiorivendell.com/lib/blocks/rr_play.php?play_f=play&bitrate=128&codec=mp3&player=Winamp
# ssl|sunshine live http://lsd.newmedia.tiscali-business.com/bb/redirect.lsc?adid=0&content=live&media=mp3&stream=sunshinelive/livestream.mp3
# subpop OGGDEMUX:DIRECT:http://pushnpop.net:8912/subpop.ogg
# tt24|Turntables24.com http://stream.turntables24.de:9200/listen.pls
# r7|radioseven http://www.radioseven.se/128.pls
# ttfm|Techno.Techno.FM DIRECT:http://stream.techno.fm/techno.256k.mp3
# ltfm|Live.Techno.FM DIRECT:http://stream.techno.fm/live.256k.mp3
